#version 330

in vec2 texture_coord;

uniform sampler2D textureImage;
uniform ivec2 screenSize;
uniform int flipVertical;
uniform int outputMode = 1;

out vec4 out_color;

vec2 textureCoord = vec2(texture_coord.x, (flipVertical != 0) ? 1 - texture_coord.y : texture_coord.y);

// Sobel function to detect edges
vec4 sobelEdges() {
    vec2 texelSize = 1.0 / screenSize;
    
    mat3 kernelX = mat3(
        -1, 0, 1,
        -2, 0, 2,
        -1, 0, 1
    );

    mat3 kernelY = mat3(
        -1, -2, -1,
         0,  0,  0,
         1,  2,  1
    );

    float gx = 0.0;
    float gy = 0.0;

    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
            vec4 pixel = texture(textureImage, textureCoord + vec2(i, j) * texelSize);
            float gray = 0.299 * pixel.r + 0.587 * pixel.g + 0.114 * pixel.b; // Grayscale conversion
            
            gx += kernelX[i + 1][j + 1] * gray;
            gy += kernelY[i + 1][j + 1] * gray;
        }
    }

    float magnitude = sqrt(gx * gx + gy * gy); // Edge magnitude
    return vec4(magnitude, magnitude, magnitude, 1.0); // Return magnitude as RGB for visualization
}

// Binarization based on edge magnitude (strong thresholding)
vec4 binarizeEdges(float threshold) {
    vec4 edges = sobelEdges();
    
    // If edge magnitude is above the threshold, it's an edge (black), otherwise it's non-edge (white)
    if (edges.r > threshold)
        return vec4(0.0, 0.0, 0.0, 1.0); // Black for edges
    else
        return vec4(1.0, 1.0, 1.0, 1.0); // White for non-edges
}

void main() {
    switch (outputMode) {
        case 1: {
            // Apply Sobel edge detection and binarization with a high threshold
            vec4 edges = binarizeEdges(0.15); // Adjust threshold for sharper edges
            out_color = edges;
            break;
        }
        default: {
            // Default: No effect, just display the original image
            out_color = texture(textureImage, textureCoord);
            break;
        }
    }
}
